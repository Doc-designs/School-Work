(defstruct movie
  title  director year type)

(defparameter *size* 3)

(defvar *db* (make-array *size*  :initial-element nil))

(defvar *db-list* nil)  

(defun quicksort (vec comp)
  (when (> (length vec) 1)
    (let ((pivot-i 0)
          (pivot (aref vec (1- (length vec)))))
      (dotimes (i (1- (length vec)))
        (when (funcall comp (aref vec i) pivot)
          (rotatef (aref vec i)
                   (aref vec pivot-i))
          (incf pivot-i)))
      (rotatef (aref vec (1- (length vec)))
               (aref vec pivot-i))
      (quicksort (rtl:slice vec 0 pivot-i) comp)
      (quicksort (rtl:slice vec (1+ pivot-i)) comp)))
  vec)

(defun add-movie (m)
  "Adds a movie to the DB and returns true"
  (dotimes (i *size*)
    (when (null (aref *db* i))
      (setf (aref *db* i) m)
      (return *db*))))

(defun add-movie-list (m)
  "Adds a movie to the end of *db-list* and returns the list"
  (dolist (i *db-list*)
    (when (equalp i m)
      (return-from add-movie-list NIL)))
  (setf *db-list* (append (list m) *db-list*)))

(defun sort-title ()
  (let ((temp-array (make-array 0 :fill-pointer t :adjustable t)))
    (dotimes (i *size*)
      (when (typep (aref *db* i) 'movie)
        (vector-push-extend (aref *db* i) temp-array)))
    (when (= (array-total-size temp-array) 0)
      (return-from sort-title NIL))
  (quicksort temp-array (lambda (obj1 obj2)
                    (when (string< (movie-title obj1)
                             (movie-title obj2))
                      T)
                          NIL))
    (setf temp-array (reverse temp-array))
    (return-from sort-title temp-array)))

(defun sort-year ()
  (let ((temp-array (make-array 0 :fill-pointer t :adjustable t)))
    (dotimes (i *size*)
      (when (typep (aref *db* i) 'movie)
        (vector-push-extend (aref *db* i) temp-array)))
    (when (= (array-total-size temp-array) 0)
      (return-from sort-year NIL))
    (quicksort temp-array (lambda (obj1 obj2)
                            (when (< (movie-year obj1)
                                     (movie-year obj2))
                              T)
                            NIL))
    (quicksort temp-array (lambda (obj1 obj2)
                            (when (< (movie-year obj1)
                                     (movie-year obj2))
                              T)
                            NIL))
    (setf temp-array (reverse temp-array))
    (return-from sort-year temp-array)))

(defun from-year (year)
  (let (filtered-movies)
    (dolist (i *db-list*)
      (when (equal (movie-year i) year)
        (setf filtered-movies (append (list i) filtered-movies))))
    (when (null filtered-movies)
      NIL)
    (return-from from-year filtered-movies)))

(defun in-db-list? (title)
  (dolist (i *db-list*)
    (cond ((equal (movie-title i) title)
           (return *db-list*))
          ((equal i *size*)
           NIL))))
